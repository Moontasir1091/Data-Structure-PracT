#include <iostream>
using namespace std;

void Heapify(int A[], int n, int i) {
    int largest = i;
    int l = 2 * i;
    int r = 2 * i + 1;

    if (l <= n && A[l] > A[largest]) {
        largest = l;
    }

    if (r <= n && A[r] > A[largest]) {
        largest = r;
    }

    if (largest != i) {
        swap(A[i], A[largest]);
        Heapify(A, n, largest);
    }
}

void BuildHeap(int A[], int n) {
    for (int i = n / 2; i >= 1; i--) {
        Heapify(A, n, i);
    }
}

void HeapSort(int A[], int n) {
    BuildHeap(A, n);

    for (int i = n; i >= 2; i--) {
        swap(A[1], A[i]);       // Move max to end
        Heapify(A, i - 1, 1);   // Re-heapify the reduced heap
    }
}

void PrintArray(int A[], int n) {
    for (int i = 1; i <= n; i++) {
        cout << A[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int A[n + 1]; // 1-based index

    cout << "Enter the elements:\n";
    for (int i = 1; i <= n; i++) {
        cin >> A[i];
    }

    HeapSort(A, n);

    cout << "Sorted array (using Heap Sort):\n";
    PrintArray(A, n);

    return 0;
}
