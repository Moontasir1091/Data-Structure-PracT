#include <iostream>
using namespace std;

// Partition function (Hoare's scheme)
int partition(int A[], int l, int h) {
    int pivot = A[l];
    int i = l, j = h;

    while (i < j) {
        while (A[i] <= pivot && i <= h) i++;
        while (A[j] > pivot && j >= l) j--;

        if (i < j) {
            swap(A[i], A[j]);
        }
    }

    swap(A[l], A[j]);
    return j;
}

// Quick Sort function
void quickSort(int A[], int l, int h) {
    if (l < h) {
        int j = partition(A, l, h);
        quickSort(A, l, j - 1);
        quickSort(A, j + 1, h);
    }
}

// Main function
int main() {
    int A[] = {40, 20, 60, 10, 50, 30};
    int n = sizeof(A) / sizeof(A[0]);

    cout << "Original array: ";
    for (int i = 0; i < n; i++)
        cout << A[i] << " ";
    cout << endl;

    quickSort(A, 0, n - 1);

    cout << "Sorted array: ";
    for (int i = 0; i < n; i++)
        cout << A[i] << " ";
    cout << endl;

    return 0;
}
